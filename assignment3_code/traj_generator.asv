function [ desired_state ] = traj_generator(t, state, waypoints)
% TRAJ_GENERATOR: Generate the trajectory passing through all
% positions listed in the waypoints list
%
% NOTE: This function would be called with variable number of input arguments.
% During initialization, it will be called with arguments
% trajectory_generator([], [], waypoints) and later, while testing, it will be
% called with only t and state as arguments, so your code should be able to
% handle that. This can be done by checking the number of arguments to the
% function using the "nargin" variable, check the MATLAB documentation for more
% information.
%
% t,state: time and current state (same variable as "state" in controller)
% that you may use for computing desired_state
%
% waypoints: The 3xP matrix listing all the points you much visited in order
% along the generated trajectory
%
% desired_state: Contains all the information that is passed to the
% controller for generating inputs for the quadrotor
%
% It is suggested to use "persistent" variables to store the waypoints during
% the initialization call of trajectory_generator.


%% Example code:
% Note that this is an example of naive trajectory generator that simply moves
% the quadrotor along a stright line between each pair of consecutive waypoints
% using a constant velocity of 0.5 m/s. Note that this is only a sample, and you
% should write your own trajectory generator for the submission.

persistent waypoints0 traj_time d0

if nargin > 2
    d = waypoints(:,2:end) - waypoints(:,1:end-1);
    d0 = 2 * sqrt(d(1,:).^2 + d(2,:).^2 + d(3,:).^2);
    traj_time = [0, cumsum(d0)];
    waypoints0 = waypoints;
    
else
    if(t > traj_time(end))
        t = traj_time(end);
    end
    t_index = find(traj_time >= t,1);
    t_index = max(t_index,1);
    if(t_index > 1)
        t = t - traj_time(t_index-1);
    end
    if(t == 0)
        desired_state.pos = waypoints0(:,1);
    else
        scale = (t - traj_time(t_index))/d0(t_index-1);
        %desired_state.pos = (1 - scale) * waypoints0(:,t_index-1) + scale * waypoints0(:,t_index);
        %times = [0 d0(1) d0(1)+d0(2) d0(1)+d0(2)+d0(3) d0(1)+d0(2)+d0(3)+d0(4)];
        %qtimes = linspace(0, traj_time, 100);
        %keyboard
        pp_x = spline(traj_time,[0 waypoints0(1,1:end) 0]);
        pp_y = spline(traj_time,[0 waypoints0(2,1:end) 0]);
        pp_z = spline(traj_time,[0 waypoints0(3,1:end) 0]);

        vel_pp_x = fnder(pp_x);
        vel_pp_y = fnder(pp_y);
        vel_pp_z = fnder(pp_z);

        acc_pp_x = fnder(vel_pp_x);
        acc_pp_y = fnder(vel_pp_y);
        acc_pp_z = fnder(vel_pp_z);

        current_time = traj_time(t_index-1) + scale;
        

        
        %keyboard
        
        position_x = ppval(pp_x, current_time);
        position_y = ppval(pp_y, current_time);
        position_z = ppval(pp_z, current_time);

        velocity_x = ppval(vel_pp_x, current_time);
        velocity_y = ppval(vel_pp_y, current_time);
        velocity_z = ppval(vel_pp_z, current_time);

        acceleration_x = ppval(acc_pp_x, current_time);
        acceleration_y = ppval(acc_pp_y, current_time);
        acceleration_z = ppval(acc_pp_z, current_time);

        desired_state.pos = [position_x;position_y;position_z];
        desired_state.vel = [velocity_x;velocity_y;velocity_z];
        desired_state.acc = [acceleration_x;acceleration_y;acceleration_z];
        desired_state.yaw = atan2(velocity_y, velocity_x);
        desired_state.yawdot = 0;
    end
    desired_state.vel = zeros(3,1);
    desired_state.acc = zeros(3,1);
    desired_state.yaw = 0;
    desired_state.yawdot = 0;
end
%


%% Fill in your code here

%polyThandle = @polyT;
%getCoffhandle = @getCoff;



end
