function [F, M] = controller(t, state, des_state, params)
%CONTROLLER  Controller for the quadrotor
%
%   state: The current state of the robot with the following fields:
%   state.pos = [x; y; z], state.vel = [x_dot; y_dot; z_dot],
%   state.rot = [phi; theta; psi], state.omega = [p; q; r]
%
%   des_state: The desired states are:
%   des_state.pos = [x; y; z], des_state.vel = [x_dot; y_dot; z_dot],
%   des_state.acc = [x_ddot; y_ddot; z_ddot], des_state.yaw,
%   des_state.yawdot
%
%   params: robot parameters

%   Using these current and desired states, you have to compute the desired
%   controls


% =================== Your code goes here ===================

kp1 = 300*0.8;
kv1 = kp1*0.17;

kp2 = kp1;
kv2 = kv1;

kp3 = kp1;
kv3 = kp3*0.12;

kp_phi = 2000*0.8;
kv_phi = kp_phi*0.1;

kp_theta = kp_phi;
kv_theta = kp_theta*0.1;

kp_psi = 2000*0.8;
kv_psi = kv_phi;

r1des = des_state.acc(1) + kv1*(des_state.vel(1) - state.vel(1)) + kp1*(des_state.pos(1) - state.pos(1));
r2des = des_state.acc(2) + kv2*(des_state.vel(2) - state.vel(2)) + kp2*(des_state.pos(2) - state.pos(2));
r3des = des_state.acc(3) + kv3*(des_state.vel(3) - state.vel(3)) + kp3*(des_state.pos(3) - state.pos(3));

phi_des = 1 / params.gravity * (r1des*sin(des_state.yaw) - r2des*cos(des_state.yaw));
theta_des = 1 / params.gravity * (r1des*cos(des_state.yaw) + r2des*sin(des_state.yaw));
psi_des = des_state.yaw;

p_des = 0;
q_des = 0;
r_des = des_state.yawdot;

% Thrust
F = params.mass*params.gravity + params.mass*r3des;

% Moment
M = params.I*[
    kp_phi*(phi_des - state.rot(1)) + kv_phi*(p_des - state.omega(1));
    kp_theta*(theta_des - state.rot(2)) + kv_theta*(q_des - state.omega(2));
    kp_psi*(psi_des - state.rot(3)) + kv_psi*(r_des - state.omega(3))
    ];

% =================== Your code ends here ===================

end
